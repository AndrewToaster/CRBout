#ifndef RBSTATE_H
#define RBSTATE_H

#include <stdint.h>
#include "errors.h"
#include "dynlist.h"
#include "playground.h"

#define CRB_NORM_CHAR(x) (((char)(x)) - 33)

typedef enum {
    CRB_DIR_NONE = 0,
    CRB_DIR_UP = 1,
    CRB_DIR_DOWN = 1 << 1,
    CRB_DIR_LEFT = 1 << 2,
    CRB_DIR_RIGHT = 1 << 3,
    
    CRB_DIR_LEFTUP = CRB_DIR_UP | CRB_DIR_LEFT,
    CRB_DIR_RIGHTUP = CRB_DIR_UP | CRB_DIR_RIGHT,
    CRB_DIR_LEFTDOWN = CRB_DIR_DOWN | CRB_DIR_LEFT,
    CRB_DIR_RIGHTDOWN = CRB_DIR_DOWN | CRB_DIR_RIGHT,

    CRB_DIR_UPDOWN = CRB_DIR_UP | CRB_DIR_DOWN,
    CRB_DIR_LEFTRIGHT = CRB_DIR_LEFT | CRB_DIR_RIGHT,

    CRB_DIR_ALL = CRB_DIR_UP | CRB_DIR_DOWN | CRB_DIR_LEFT | CRB_DIR_RIGHT
} crb_dir_e;

typedef enum {
    CRB_MODE_TRAVERSAL,
    CRB_MODE_CONDTRAVERSAL,
    CRB_MODE_COMPARISON,
    CRB_MODE_FLAGS,
    CRB_MODE_OPERATION,
    CRB_MODE_STACK,
    CRB_MODE_HEAP,
    CRB_MODE_IO,
    CRB_MODE_PLAYGROUND
} crb_mode_e;

typedef enum {
    // Two special kids
    CRB_OP_HALT = CRB_NORM_CHAR('~'),
    CRB_OP_RESET = CRB_NORM_CHAR(';'),

    CRB_OP_SET_CONDITIONALTRAVERSAL = CRB_NORM_CHAR('@'),
    CRB_OP_SET_COMPARE = CRB_NORM_CHAR('?'),
    CRB_OP_SET_FLAGS = CRB_NORM_CHAR('&'),
    CRB_OP_SET_OPERATION = CRB_NORM_CHAR('%'),
    CRB_OP_SET_STACK = CRB_NORM_CHAR('='),
    CRB_OP_SET_HEAP = CRB_NORM_CHAR('['),
    CRB_OP_SET_IO = CRB_NORM_CHAR('$'),
    CRB_OP_SET_MAP = CRB_NORM_CHAR('#'),
    CRB_OP_FLOW_RIGHT = CRB_NORM_CHAR('>'),
    CRB_OP_FLOW_LEFT = CRB_NORM_CHAR('<'),
    CRB_OP_FLOW_DOWN = CRB_NORM_CHAR('v'),
    CRB_OP_FLOW_UP = CRB_NORM_CHAR('^'),
    CRB_OP_FLOW_FSREFLECT = CRB_NORM_CHAR('/'),
    CRB_OP_FLOW_BSREFLECT = CRB_NORM_CHAR('\\'),
    CRB_OP_FLOW_VREFLECT = CRB_NORM_CHAR('-'),
    CRB_OP_FLOW_HREFLECT = CRB_NORM_CHAR('|'),
    CRB_OP_FLOW_PREFLECT = CRB_NORM_CHAR('+'),
    CRB_OP_FLOW_XREFLECT = CRB_NORM_CHAR('x'),
    CRB_OP_FLOW_SREFLECT = CRB_NORM_CHAR('*'),
    CRB_OP_COMPARE_GREATERTHAN = CRB_NORM_CHAR('>'),
    CRB_OP_COMPARE_LESSTHAN = CRB_NORM_CHAR('<'),
    CRB_OP_COMPARE_EQUAL = CRB_NORM_CHAR('='),
    CRB_OP_COMPARE_NOTEQUAL = CRB_NORM_CHAR('!'),
    CRB_OP_FLAGS_TRUE = CRB_NORM_CHAR('|'),
    CRB_OP_FLAGS_FALSE = CRB_NORM_CHAR('&'),
    CRB_OP_FLAGS_INVERT = CRB_NORM_CHAR('^'),
    CRB_OP_FLAGS_PUSH = CRB_NORM_CHAR('>'),
    CRB_OP_FLAGS_TEST = CRB_NORM_CHAR('?'),
    CRB_OP_OPERATION_ADD = CRB_NORM_CHAR('+'),
    CRB_OP_OPERATION_SUB = CRB_NORM_CHAR('-'),
    CRB_OP_OPERATION_MUL = CRB_NORM_CHAR('*'),
    CRB_OP_OPERATION_DIV = CRB_NORM_CHAR('/'),
    CRB_OP_OPERATION_POW = CRB_NORM_CHAR('^'),
    CRB_OP_OPERATION_ROOT = CRB_NORM_CHAR('\\'),
    CRB_OP_OPERATION_MOD = CRB_NORM_CHAR('%'),
    CRB_OP_OPERATION_OR = CRB_NORM_CHAR('|'),
    CRB_OP_OPERATION_AND = CRB_NORM_CHAR('&'),
    CRB_OP_OPERATION_XOR = CRB_NORM_CHAR('v'),
    CRB_OP_OPERATION_RSHIFT = CRB_NORM_CHAR('>'),
    CRB_OP_OPERATION_LSHIFT = CRB_NORM_CHAR('<'),
    CRB_OP_OPERATION_INVERT = CRB_NORM_CHAR('!'),
    CRB_OP_STACK_PUSH = CRB_NORM_CHAR('+'),
    CRB_OP_STACK_POP = CRB_NORM_CHAR('-'),
    CRB_OP_STACK_SWAP = CRB_NORM_CHAR('*'),
    CRB_OP_STACK_SAVE = CRB_NORM_CHAR('>'),
    CRB_OP_STACK_LOAD = CRB_NORM_CHAR('<'),
    CRB_OP_STACK_ANY = CRB_NORM_CHAR('?'),
    CRB_OP_STACK_DUPE = CRB_NORM_CHAR(':'),
    CRB_OP_STACK_CLEAR = CRB_NORM_CHAR('&'),
    CRB_OP_HEAP_RSHIFT = CRB_NORM_CHAR('>'),
    CRB_OP_HEAP_LSHIFT = CRB_NORM_CHAR('<'),
    CRB_OP_HEAP_JUMP = CRB_NORM_CHAR('#'),
    CRB_OP_HEAP_HOME = CRB_NORM_CHAR('*'),
    CRB_OP_HEAP_INCREMENT = CRB_NORM_CHAR('+'),
    CRB_OP_HEAP_DECREMENT = CRB_NORM_CHAR('-'),
    CRB_OP_HEAP_NULL = CRB_NORM_CHAR('0'),
    CRB_OP_HEAP_CLEAR = CRB_NORM_CHAR('&'),
    CRB_OP_IO_WRITE = CRB_NORM_CHAR('+'),
    CRB_OP_IO_READ = CRB_NORM_CHAR('-'),
    CRB_OP_IO_ANY = CRB_NORM_CHAR('?'),
    CRB_OP_MAP_READ = CRB_NORM_CHAR('+'),
    CRB_OP_MAP_WRITE = CRB_NORM_CHAR('-'),
    CRB_OP_MAP_NULL = CRB_NORM_CHAR('*'),
    CRB_OP_MAP_JUMP = CRB_NORM_CHAR('#'),
    CRB_OP_MAP_WINCREMENT = CRB_NORM_CHAR('>'),
    CRB_OP_MAP_WDECREMENT = CRB_NORM_CHAR('<'),
    CRB_OP_MAP_HINCREMENT = CRB_NORM_CHAR('v'),
    CRB_OP_MAP_HDECREMENT = CRB_NORM_CHAR('^'),
    CRB_OP_MAP_READWIDTH = CRB_NORM_CHAR('W'),
    CRB_OP_MAP_READHEIGHT = CRB_NORM_CHAR('H'),
    CRB_OP_MAP_READX = CRB_NORM_CHAR('X'),
    CRB_OP_MAP_READY = CRB_NORM_CHAR('Y')
} crb_op_e;

typedef enum {
    CRB_FLAG_RESULT = 1,
    CRB_FLAG_OP_FAILED = 1 << 1,
    CRB_FLAG_LOW_STACK = 1 << 2,
    CRB_FLAG_COMPLEX_ROOT = 1 << 3,
    CRB_FLAG_DIVIDE_BY_ZERO = 1 << 4,
    CRB_FLAG_RESULT_TRUNCATED = 1 << 5,
    CRB_FLAG_READ_NO_DIGITS = 1 << 6,
    CRB_FLAG_INVALID_VALUE = 1 << 7,
    CRB_FLAG_UTF_8_ERROR = 1 << 8,
} crb_flags_e;

typedef struct {
    size_t x;
    size_t y;
} crb_pos_t;


typedef struct {
    crb_pos_t pos;
    crb_dir_e dir;
    crb_mode_e mode;
    crb_flags_e flags;
    crb_playground_t pg;
    crb_dynlist_t stack;
} crb_state_t;

CRB_ERROR crb_state_init();
CRB_ERROR crb_state_step(crb_state_t* self);

#endif